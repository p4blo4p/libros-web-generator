# libros-web-generator/.github/workflows/static.yml
name: Build, Lint, Generate, and Deploy Static Site

on:
  # push:
    # branches: [ "large-data-optimization" ] # Consider changing to "main" or your primary branch
  # pull_request:
    # branches: [ "large-data-optimization" ] # Consider changing to "main" or your primary branch
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Forzar regeneración completa (ignora manifest)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

jobs:
  setup_and_lint:
    name: Setup, Cache & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with flake8
        run: |
          # Flake8 usará la configuración de .flake8
          # Si quieres una pasada más estricta solo para ciertos errores, puedes mantener el --select aquí:
          echo "Running Flake8 (strict pass for E9,F63,F7,F82)..."
          flake8 . --count --select=E9,F63,F7,F82 --format=pylint --statistics || exit 1
          # Segunda pasada para el resto (respetará max-line-length, max-complexity y excludes de .flake8)
          echo "Running Flake8 (style and complexity pass)..."
          # flake8 . --count --format=pylint --statistics

  generate_language_slice:
    name: Generate - Pages for ${{ matrix.language }}
    runs-on: ubuntu-latest
    needs: setup_and_lint
    strategy:
      fail-fast: false
      matrix:
        language: [en, es, fr, it, de]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restore Generation Manifest from Cache
        uses: actions/cache@v4
        with:
          path: .cache/generation_manifest.json
          key: ${{ runner.os }}-gen-manifest-v1-${{ github.ref }}

      - name: Initialize manifest if not restored (fallback)
        run: |
          if [ ! -f ".cache/generation_manifest.json" ]; then
            echo "Manifest not found after cache restore attempt, creating empty for this job."
            mkdir -p .cache
            echo "{}" > .cache/generation_manifest.json
          fi

      - name: Generate static site for language ${{ matrix.language }}
        env:
          FORCE_REGENERATE_FLAG: ${{ github.event.inputs.force_regenerate == 'true' && '--force-regenerate' || '' }}
        run: |
          set -e
          echo "Running static site generator for language: ${{ matrix.language }}"
          python generate_static.py --language ${{ matrix.language }} $FORCE_REGENERATE_FLAG
          echo "Static site generation for ${{ matrix.language }} finished."

      - name: Upload language slice artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-slice-${{ matrix.language }}
          path: _site/
          if-no-files-found: error
          retention-days: 3

  combine_and_deploy:
    name: Finalize - Combine Slices & Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: generate_language_slice

    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Clean and create final _site directory
        run: |
          rm -rf _site
          mkdir -p _site

      - name: Download all language slice artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./_temp_slices

      - name: Combine language slices
        run: |
          echo "Combining language slices..."
          for slice_dir_container in ./_temp_slices/site-slice-*; do
            if [ -d "$slice_dir_container" ]; then
              echo "Processing slice container: $slice_dir_container"
              rsync -av "$slice_dir_container/" ./_site/
            else
              echo "Skipping non-directory item: $slice_dir_container"
            fi
          done
          echo "Listing combined _site directory:"
          ls -alph ./_site

      - name: Copy static and public assets to final _site
        run: |
          echo "Copying global static and public assets..."
          if [ -d "static" ]; then cp -r static ./_site/static; echo "Copied static folder."; fi
          if [ -d "public" ]; then
            find public -maxdepth 1 -type f -exec cp {} ./_site/ \;
            echo "Copied public files."
          else
            echo "Public directory not found, skipping."
          fi

      - name: Generate root index, sitemap.xml and final manifest
        env:
          FORCE_REGENERATE_FLAG: ${{ github.event.inputs.force_regenerate == 'true' && '--force-regenerate' || '' }}
        run: |
          echo "Generating root index.html, sitemap.xml, and updating global manifest..."
          python generate_static.py $FORCE_REGENERATE_FLAG
          echo "Final generation step complete."

      - name: Cache Updated Generation Manifest
        uses: actions/cache@v4
        with:
          path: .cache/generation_manifest.json
          key: ${{ runner.os }}-gen-manifest-v1-${{ github.ref }}

      - name: Upload final full site artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-site-final
          path: _site/
          if-no-files-found: error
          retention-days: 7

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/large-data-optimization')
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site
