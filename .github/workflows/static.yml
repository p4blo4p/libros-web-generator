# .github/workflows/main.yml
name: Build, Lint, Generate, and Deploy Static Site

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Forzar regeneración completa (ignora manifest)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read

jobs:
  setup_and_lint:
    name: Setup, Cache & Lint
    runs-on: ubuntu-latest
    outputs:
      manifest_path: .cache/generation_manifest.json # Para que otros jobs sepan dónde está
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Generation Manifest # NEW: Cachear el manifest
        id: manifest_cache # Darle un id para referenciar su salida
        uses: actions/cache@v4
        with:
          path: .cache/generation_manifest.json
          key: ${{ runner.os }}-gen-manifest-v1-${{ github.ref }} # Cache por rama
          restore-keys: |
            ${{ runner.os }}-gen-manifest-v1-

      - name: Initialize manifest if not restored from cache
        if: steps.manifest_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache
          echo "{}" > .cache/generation_manifest.json
          echo "Initialized new generation_manifest.json"

      - name: Install dependencies (app, flake8)
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "ERROR: requirements.txt not found!"
            exit 1
          fi
      
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || exit 1
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  generate_language_slice:
    name: Generate - Pages for ${{ matrix.language }}
    runs-on: ubuntu-latest
    needs: setup_and_lint
    strategy:
      fail-fast: false
      matrix:
        language: [en, es, fr, it, de] # Tus idiomas

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Restore Generation Manifest from Cache # NEW
        uses: actions/cache@v4
        with:
          path: .cache/generation_manifest.json # Debe ser la misma ruta
          key: ${{ runner.os }}-gen-manifest-v1-${{ github.ref }} # Misma clave que en setup_and_lint
          # No necesitamos restore-keys aquí si el job de setup siempre lo crea/restaura

      - name: Initialize manifest if not restored (fallback)
        # Este if es por si el cache no se propaga instantáneamente o hay algún problema
        run: |
          if [ ! -f ".cache/generation_manifest.json" ]; then
            echo "Manifest not found after cache restore attempt, creating empty for this job."
            mkdir -p .cache
            echo "{}" > .cache/generation_manifest.json
          fi

      - name: Install application dependencies (pip cache helps)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Generate static site for language ${{ matrix.language }}
        env:
          FORCE_REGENERATE_FLAG: ${{ github.event.inputs.force_regenerate == 'true' && '--force-regenerate' || '' }}
        run: |
          set -e
          echo "Running static site generator for language: ${{ matrix.language }}"
          # Pasar --force-regenerate si el input del workflow es true
          python generate_static.py --language ${{ matrix.language }} $FORCE_REGENERATE_FLAG
          echo "Static site generation for ${{ matrix.language }} finished."

      - name: Upload language slice artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-slice-${{ matrix.language }}
          path: _site/
          if-no-files-found: error
          retention-days: 3

  combine_and_deploy: # Combinado los jobs de "combine" y "deploy"
    name: Finalize - Combine Slices & Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: generate_language_slice

    # Permisos específicos para este job (si se va a desplegar)
    permissions:
      contents: write
      pages: write
      id-token: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create final _site directory
        run: mkdir -p _site

      - name: Download all language slice artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./_temp_slices

      - name: Combine language slices
        run: |
          echo "Combining language slices..."
          for slice_dir_container in ./_temp_slices/site-slice-*; do
            if [ -d "$slice_dir_container" ]; then
              echo "Processing slice container: $slice_dir_container"
              # El contenido de _site está directamente dentro de $slice_dir_container
              rsync -av "$slice_dir_container/" ./_site/
            fi
          done
          echo "Listing combined _site directory:"
          ls -alph ./_site

      - name: Copy static and public assets to final _site
        run: |
          echo "Copying global static and public assets..."
          if [ -d "static" ]; then cp -r static ./_site/static; echo "Copied static folder."; fi
          if [ -d "public" ]; then find public -maxdepth 1 -type f -exec cp {} ./_site/ \; echo "Copied public files."; fi

      - name: Install dependencies for final manifest/sitemap/index generation
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Generate root index, sitemap.xml and final manifest
        env:
          FORCE_REGENERATE_FLAG: ${{ github.event.inputs.force_regenerate == 'true' && '--force-regenerate' || '' }}
        run: |
          echo "Generating root index.html, sitemap.xml, and updating global manifest..."
          # Ejecutar SIN --language para que genere el sitemap.xml, /index.html
          # y ACTUALICE el manifest global con todos los cambios.
          # El script generate_static.py ahora (con la modif.) SOLO guarda el manifest si no tiene --language.
          python generate_static.py $FORCE_REGENERATE_FLAG
          echo "Final generation step complete."

      - name: Cache Updated Generation Manifest # NEW: Guardar el manifest actualizado
        # Este paso se ejecutará incluso si el despliegue se salta (por no ser push a main)
        # Lo cual es bueno para que el manifest esté actualizado para la próxima ejecución.
        uses: actions/cache@v4
        with:
          path: .cache/generation_manifest.json
          key: ${{ runner.os }}-gen-manifest-v1-${{ github.ref }} # Misma clave para sobrescribir

      - name: Upload final full site artifact (for inspection or manual deploy)
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-site-final
          path: _site/
          if-no-files-found: error
          retention-days: 7
      
      # --- Despliegue a GitHub Pages ---
      - name: Deploy to GitHub Pages (if on main branch push)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site # Ahora _site contiene todo lo combinado
          # ... (otras opciones de peaceiris/actions-gh-pages) ...
