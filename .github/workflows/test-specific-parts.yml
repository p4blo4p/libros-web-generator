# .github/workflows/test-specific-parts.yml
name: Test Specific Parts (Lint on Push, Generate Manually)

on:
  workflow_dispatch: # Para ejecución manual completa con inputs
    inputs:
      force_regenerate_test:
        description: 'Forzar regeneración para este test (ignora manifest)'
        required: false
        default: 'false'
        type: boolean
      test_language:
        description: 'Idioma para testear generación (ej. es, en). Requerido si se usa test_char_key.'
        required: false
        default: 'es' # Default para cuando se ejecuta manualmente
        type: string
      test_char_key:
        description: 'Clave de carácter para testear generación (ej. z, a, 0). Si se usa, test_language debe estar seteado.'
        required: false
        default: 'z' # Default para cuando se ejecuta manualmente
        type: string
      log_level: # Este input solo se usará si el job de generación se ejecuta
        description: 'Nivel de log para generate_static.py (INFO, DEBUG)'
        required: false
        default: 'INFO'
        type: choice
        options:
          - INFO
          - DEBUG
  push: # Trigger para el linting
    branches:
      - 'large-data-optimization' # Ejecutar linting en push a esta rama
      # - 'feature/**'
      # - '!main' # No ejecutar en main si el workflow principal ya lo hace

permissions:
  contents: read

jobs:
  test_lint_setup_only: # Este job se ejecutará en push y workflow_dispatch
    name: Setup, Cache & Lint (Test)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-specific-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-specific-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8
      - name: Lint with flake8
        run: |
          echo "Running Flake8 (strict pass for E9,F63,F7,F82)..."
          flake8 . --count --select=E9,F63,F7,F82 --format=pylint --statistics || exit 1
          echo "Running Flake8 (style and complexity pass)..."
          # flake8 . --count --format=pylint --statistics

  test_generate_specific_slice:
    # ESTE JOB SOLO SE EJECUTARÁ EN WORKFLOW_DISPATCH (ejecución manual)
    name: Test Generate (Manual Only) - Lang ${{ github.event.inputs.test_language }} / Char ${{ github.event.inputs.test_char_key || 'ALL' }}
    if: github.event_name == 'workflow_dispatch' # Condición clave
    runs-on: ubuntu-latest
    needs: test_lint_setup_only # Opcional: Aún puede depender del linting si lo deseas, incluso si solo se ejecuta manualmente
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-specific-${{ hashFiles('**/requirements.txt') }} # Misma clave que el job de lint
          restore-keys: |
            ${{ runner.os }}-pip-test-specific-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restore/Initialize Manifest (for testing)
        id: manifest_cache
        uses: actions/cache@v4
        with:
          path: .cache/generation_manifest.json
          # La clave de caché usa los inputs, que solo están definidos en workflow_dispatch
          key: ${{ runner.os }}-gen-manifest-test-slice-v1-${{ github.event.inputs.test_language }}-${{ github.event.inputs.test_char_key }}
      
      - name: Initialize manifest if not restored by cache
        # Este if también está implícitamente condicionado por github.event_name == 'workflow_dispatch' debido al if del job
        if: steps.manifest_cache.outputs.cache-hit != 'true'
        run: |
          echo "Test manifest not restored from cache, creating empty for this job."
          mkdir -p .cache
          echo "{}" > .cache/generation_manifest.json
        
      - name: Generate static site for specific slice
        env:
          # Todos estos inputs solo existen en workflow_dispatch
          FORCE_REGENERATE_FLAG: ${{ github.event.inputs.force_regenerate_test == 'true' && '--force-regenerate' || '' }}
          TARGET_LANG: ${{ github.event.inputs.test_language }}
          TARGET_CHAR_KEY: ${{ github.event.inputs.test_char_key }}
          # PYTHON_LOG_LEVEL: ${{ github.event.inputs.log_level }}
        run: |
          set -e
          
          COMMAND_ARGS=""
          if [[ -n "$TARGET_LANG" ]]; then
            COMMAND_ARGS="$COMMAND_ARGS --language $TARGET_LANG"
            if [[ -n "$TARGET_CHAR_KEY" ]]; then
              COMMAND_ARGS="$COMMAND_ARGS --char-key $TARGET_CHAR_KEY"
            fi
          else
            # Si TARGET_LANG está vacío (aunque tiene default 'es' para workflow_dispatch)
            # El script generate_static.py debería manejar la generación de todos los idiomas.
            # No se aplicaría TARGET_CHAR_KEY.
            echo "TARGET_LANG está vacío, se intentará generar para todos los idiomas (comportamiento de generate_static.py)."
          fi
          
          echo "Running: python generate_static.py $COMMAND_ARGS $FORCE_REGENERATE_FLAG"
          python generate_static.py $COMMAND_ARGS $FORCE_REGENERATE_FLAG
          
          echo "Static site generation for specific slice finished."

      - name: List generated files in _site (for debugging)
        if: always()
        run: |
          echo "Contenido de _site:"
          ls -R _site || echo "_site no existe o está vacío."

      - name: Upload specific slice artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-site-slice-${{ github.event.inputs.test_language || 'all_langs' }}-${{ github.event.inputs.test_char_key || 'all_chars' }}
          path: _site/
          if-no-files-found: error 
          retention-days: 1
